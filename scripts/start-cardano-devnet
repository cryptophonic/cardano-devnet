#!/usr/bin/env bash

while getopts "miep" opt; do
    case $opt in
        m)
            START_MONITOR=true
            ;;
        i)
            START_INDEXER=true
            ;;
        e)
            START_EXPLORER=true
            ;;
        p)
            START_PROVIDER=true
            ;;
        \?)
            OPTSERR=true
            ;;
    esac
done

shift $((OPTIND-1))

if [ -n "$OPTSERR" ] || [[ ! $1 == ?(-)+([0-9]) ]]; then
  SCRIPTNAME=$(basename $0)
  echo "usage: $SCRIPTNAME [-m] [-i] [-e] [-p] <block time>"
  echo "  -m  run terminal monitor"
  echo "  -i  run indexer"
  echo "  -e  run explorer"
  echo "  -p  run provider backend"
  exit -1
fi

RUNTIMEDIR=$DEVNET_ROOT/runtime
TARGETDIR=$RUNTIMEDIR/chain

CARDANO_CLI="cardano-cli"
CARDANO_CLI_RUNTIMEDIR="$RUNTIMEDIR"
CARDANO_CLI_KEYS_PATH="$CARDANO_ASSETS_PATH/keys"
echo "CARDANO_CLI_KEYS_PATH=$CARDANO_CLI_KEYS_PATH"

if [ ! $(type -P "docker" ) ]; then
  echo "docker not in path, please install either cardano-node and ogmios, or docker"
  exit -1
fi

# Clean up old runs
[ -d "$RUNTIMEDIR" ] && { echo "Cleaning up directory $RUNTIMEDIR" ; rm -rf $RUNTIMEDIR ; }
mkdir -p "$RUNTIMEDIR"
mkdir -p "$RUNTIMEDIR/db"
mkdir -p "$RUNTIMEDIR/ipc"

# Set up devnet
$DEVNET_ROOT/scripts/setup-devnet $1 

# Set up signing pipeline for cardano-cli
mkfifo $RUNTIMEDIR/tx.draft
mkfifo $RUNTIMEDIR/tx.signed

docker compose up cardano-node ogmios --detach

if [ -n "$START_MONITOR" ]; then
  STDOUT_INDEXER=/dev/null
elif [ -n "$START_INDEXER" ]; then
  STDOUT_INDEXER=/dev/stdout
else
  STDOUT_CARDANO_NODE=true
fi

# transfer from faucet -> faucet to put an indexed tx on-chain (genesis tx's are not indexed)
# note: we're using named fifos here so we issue the commands in "reverse" order so
# there is a reader listening on the pipe when we create the writer to prevent an error
sleep 1
echo "#"
echo "# build / sign / submit in reverse order because pipes need to have listeners before you"
echo "# can write to them. (tx.draft and tx.signed are fifos)"
echo "#"
echo $CARDANO_CLI conway transaction submit \
  --tx-file "$CARDANO_CLI_RUNTIMEDIR/tx.signed" 
$CARDANO_CLI conway transaction submit \
  --tx-file "$CARDANO_CLI_RUNTIMEDIR/tx.signed" &
sleep 1
echo $CARDANO_CLI conway transaction sign \
  --tx-body-file "$CARDANO_CLI_RUNTIMEDIR/tx.draft" \
  --signing-key-file "$CARDANO_CLI_KEYS_PATH/faucet.skey" \
  --out-file "$CARDANO_CLI_RUNTIMEDIR/tx.signed"
$CARDANO_CLI conway transaction sign \
  --tx-body-file "$CARDANO_CLI_RUNTIMEDIR/tx.draft" \
  --signing-key-file "$CARDANO_CLI_KEYS_PATH/faucet.skey" \
  --out-file "$CARDANO_CLI_RUNTIMEDIR/tx.signed" &
sleep 1
echo $CARDANO_CLI conway transaction build \
  --tx-in 8c78893911a35d7c52104c98e8497a14d7295b4d9bf7811fc1d4e9f449884284#0 \
  --change-address addr_test1vztc80na8320zymhjekl40yjsnxkcvhu58x59mc2fuwvgkc332vxv \
  --out-file "$CARDANO_CLI_RUNTIMEDIR/tx.draft"
$CARDANO_CLI conway transaction build \
  --tx-in 8c78893911a35d7c52104c98e8497a14d7295b4d9bf7811fc1d4e9f449884284#0 \
  --change-address addr_test1vztc80na8320zymhjekl40yjsnxkcvhu58x59mc2fuwvgkc332vxv \
  --out-file "$CARDANO_CLI_RUNTIMEDIR/tx.draft"

if [ -n "$START_INDEXER" ]; then
  echo "Starting indexer"
  node $DEVNET_ROOT/src/devnet/indexer.mjs > $STDOUT_INDEXER 2>&1 &
fi

if [ -n "$START_EXPLORER" ]; then
  echo "Starting explorer"
  (cd $DEVNET_ROOT/explorer && npm run dev > /dev/null 2>&1) &
fi

if [ -n "$START_PROVIDER" ]; then
  echo "Starting provider"
  node $DEVNET_ROOT/src/devnet/provider.mjs > /dev/null 2>&1 &
fi

function clean_up {
  echo
  echo "Trapped exit; cleaning up"

  docker compose down

  THIS_PGID=$(ps --no-headers -o pgid:1 $$)
  kill -term "-$THIS_PGID"
}

trap clean_up EXIT

if [ -n "$START_MONITOR" ]; then
  echo "Starting monitor"
  monitor
elif [ -n "$STDOUT_CARDANO_NODE" ]; then
  docker logs -f devnet-cardano-node
else
  sleep infinity
fi
